import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
import paramiko
import subprocess
import traceback

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
# ALLOWED_USERS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —á–∏—Å–ª–æ–≤—ã—Ö ID
ALLOWED_USERS = [int(uid) for uid in os.getenv("ALLOWED_USERS", "").replace(' ', '').split(',') if uid.isdigit()]
SERVER_MAC = os.getenv("SERVER_MAC")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª–∏ ---
# –î–ª—è —Ä–æ—É—Ç–µ—Ä–∞ (WOL)
ROUTER_SSH_HOST = "localhost"
ROUTER_SSH_PORT = int(os.getenv("ROUTER_SSH_PORT", "2223"))
ROUTER_SSH_USER = os.getenv("ROUTER_SSH_USER", "root")
ROUTER_SSH_KEY_PATH = "/app/keys/id_router_vps_rsa_legacy"  # –ö–ª—é—á –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ (RSA legacy)

# –î–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (Shutdown, Status)
SERVER_SSH_HOST = "localhost"
SERVER_SSH_PORT = int(os.getenv("SERVER_SSH_PORT", "2222"))
SERVER_SSH_USER = os.getenv("SERVER_SSH_USER", "friedcerebrum")
SERVER_SSH_KEY_PATH = "/app/keys/id_rsa"  # –ö–ª—é—á –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ–±–∞–≤—å—Ç–µ –≤ keys/)


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
if not all([BOT_TOKEN, ALLOWED_USERS, SERVER_MAC]):
    raise ValueError("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã (BOT_TOKEN, ALLOWED_USERS, SERVER_MAC)!")

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ ---
def restricted(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É"""
    def wrapped(update: Update, context: CallbackContext, *args, **kwargs):
        user = update.effective_user
        user_id = user.id if user is not None else None
        if user_id not in ALLOWED_USERS:
            logger.warning(f"Unauthorized access denied for {user_id}.")
            update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        return func(update, context, *args, **kwargs)
    return wrapped

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

def main_menu_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("\U0001F50C –í–∫–ª—é—á–∏—Ç—å", callback_data='wol'),
            InlineKeyboardButton("\U0001F534 –í—ã–∫–ª—é—á–∏—Ç—å", callback_data='shutdown_confirm'),
        ],
        [
            InlineKeyboardButton("\U0001F7E2 –°—Ç–∞—Ç—É—Å", callback_data='status')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

@restricted
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "\U0001F680 **–°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

@restricted
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    if user_id not in ALLOWED_USERS:
        query.answer()
        query.edit_message_text("\u274C –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    data = query.data
    if data == 'wol':
        query.answer()
        wake_on_lan_callback(query, context)
    elif data == 'shutdown_confirm':
        query.answer()
        confirm_keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("\u2705 –î–∞, –≤—ã–∫–ª—é—á–∏—Ç—å", callback_data='shutdown_yes'),
                InlineKeyboardButton("\u274C –ù–µ—Ç", callback_data='cancel')
            ]
        ])
        query.edit_message_text(
            "\u26A0\ufe0f –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?",
            reply_markup=confirm_keyboard
        )
    elif data == 'shutdown_yes':
        query.answer()
        shutdown_server_callback(query, context)
    elif data == 'cancel':
        query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        query.edit_message_text(
            "\u274C –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=main_menu_keyboard()
        )
    elif data == 'status':
        query.answer()
        server_status_callback(query, context)
    else:
        query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# --- Callback versions of commands ---
def wake_on_lan_callback(query, context):
    query.edit_message_text("\u23F3 –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ...")
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        private_key = paramiko.RSAKey.from_private_key_file(ROUTER_SSH_KEY_PATH)
        client.connect(
            ROUTER_SSH_HOST,
            port=ROUTER_SSH_PORT,
            username=ROUTER_SSH_USER,
            pkey=private_key
        )
        stdin, stdout, stderr = client.exec_command(f"etherwake -i br-lan {SERVER_MAC}")
        raw_stdout = stdout.read()
        raw_stderr = stderr.read()
        try:
            output = raw_stdout.decode("utf-8")
        except Exception as e:
            output = f"[decode error: {e}] raw: {raw_stdout}"
        try:
            error = raw_stderr.decode("utf-8")
        except Exception as e:
            error = f"[decode error: {e}] raw: {raw_stderr}"
        logger.info(f"WOL output: {output}")
        logger.info(f"WOL error: {error}")
        client.close()
        if error.strip():
            query.edit_message_text(f"\u274C –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ: {error}", reply_markup=main_menu_keyboard())
        else:
            query.edit_message_text("\U0001F50C **Magic packet –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!** –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–∫–æ—Ä–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.", parse_mode='Markdown', reply_markup=main_menu_keyboard())
    except Exception as e:
        tb = traceback.format_exc()
        logger.error(f"WOL Error: {e}\n{tb}")
        tb_md = tb.replace('`', "'")
        query.edit_message_text(
            f"\u26A0\ufe0f **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–æ—É—Ç–µ—Ä—É:**\n`{str(e)}`\n\n–¢—Ä–µ–π—Å–±–µ–∫:\n```\n{tb_md}\n```\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ SSH-—Ç—É–Ω–Ω–µ–ª—å –æ—Ç —Ä–æ—É—Ç–µ—Ä–∞.",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )

def shutdown_server_callback(query, context):
    query.edit_message_text("\u23F3 –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ...")
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        private_key = paramiko.RSAKey.from_private_key_file(SERVER_SSH_KEY_PATH)
        client.connect(
            SERVER_SSH_HOST,
            port=SERVER_SSH_PORT,
            username=SERVER_SSH_USER,
            pkey=private_key
        )
        stdin, stdout, stderr = client.exec_command("sudo /sbin/shutdown -h now")
        error = stderr.read().decode()
        client.close()
        if error:
            query.edit_message_text(f"\u274C –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {error}", reply_markup=main_menu_keyboard())
        else:
            query.edit_message_text("\U0001F534 **–ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!** –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.", parse_mode='Markdown', reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"Shutdown Error: {e}")
        query.edit_message_text(f"\u26A0\ufe0f **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥–æ–º–∞—à–Ω–µ–º—É —Å–µ—Ä–≤–µ—Ä—É:**\n`{str(e)}`\n\n–°–µ—Ä–≤–µ—Ä —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ —Ç—É–Ω–Ω–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.", parse_mode='Markdown', reply_markup=main_menu_keyboard())

def server_status_callback(query, context):
    try:
        result = subprocess.run(
            ["nc", "-z", "-w", "3", SERVER_SSH_HOST, str(SERVER_SSH_PORT)],
            capture_output=True, text=True
        )
        if result.returncode == 0:
            query.edit_message_text("\U0001F7E2 **–°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω** (SSH-—Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω).", parse_mode='Markdown', reply_markup=main_menu_keyboard())
        else:
            query.edit_message_text("\U0001F534 **–°–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω** (SSH-—Ç—É–Ω–Ω–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç).", parse_mode='Markdown', reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"Status Check Error: {e}")
        query.edit_message_text(f"\u26A0\ufe0f –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}", reply_markup=main_menu_keyboard())

# –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
#@restricted
#def wake_on_lan(update: Update, context: CallbackContext):
#    ...
#@restricted
#def shutdown_server(update: Update, context: CallbackContext):
#    ...
#@restricted
#def server_status(update: Update, context: CallbackContext):
#    ...

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not os.path.exists(ROUTER_SSH_KEY_PATH) or not os.path.exists(SERVER_SSH_KEY_PATH):
        logger.error("SSH –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—É—Ç—è–º! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker-—Ç–æ–º.")
        return
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
        return
    updater = Updater(BOT_TOKEN)
    if updater is None:
        logger.error("Updater –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return
    dispatcher = updater.dispatcher
    if dispatcher is None:
        logger.error("Dispatcher –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    # dispatcher.add_handler(CommandHandler("wol", wake_on_lan))
    # dispatcher.add_handler(CommandHandler("shutdown", shutdown_server))
    # dispatcher.add_handler(CommandHandler("status", server_status))
    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.idle()

if __name__ == '__main__':
    main()