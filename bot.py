import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
import paramiko
import subprocess
import traceback
import time
from functools import wraps

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
# ALLOWED_USERS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —á–∏—Å–ª–æ–≤—ã—Ö ID
ALLOWED_USERS = [int(uid) for uid in os.getenv("ALLOWED_USERS", "").replace(' ', '').split(',') if uid.isdigit()]
SERVER_MAC = os.getenv("SERVER_MAC")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª–∏ ---
# –î–ª—è —Ä–æ—É—Ç–µ—Ä–∞ (WOL)
ROUTER_SSH_HOST = "localhost"
ROUTER_SSH_PORT = int(os.getenv("ROUTER_SSH_PORT", "2223"))
ROUTER_SSH_USER = os.getenv("ROUTER_SSH_USER", "root")
ROUTER_SSH_KEY_PATH = "/app/keys/id_router_vps_rsa_legacy"

# –î–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (Shutdown, Status)
SERVER_SSH_HOST = "localhost"
SERVER_SSH_PORT = int(os.getenv("SERVER_SSH_PORT", "2222"))
SERVER_SSH_USER = os.getenv("SERVER_SSH_USER", "friedcerebrum")
SERVER_SSH_KEY_PATH = "/app/keys/id_rsa"

# –¢–∞–π–º–∞—É—Ç—ã
SSH_TIMEOUT = 10
NC_TIMEOUT = 3

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
if not all([BOT_TOKEN, ALLOWED_USERS, SERVER_MAC]):
    raise ValueError("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã (BOT_TOKEN, ALLOWED_USERS, SERVER_MAC)!")

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ ---
def restricted(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É"""
    @wraps(func)
    def wrapped(update: Update, context: CallbackContext, *args, **kwargs):
        user = update.effective_user
        user_id = user.id if user is not None else None
        
        if user_id not in ALLOWED_USERS:
            logger.warning(f"Unauthorized access denied for {user_id}.")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if update.message:
                update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            elif update.callback_query:
                update.callback_query.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
                update.callback_query.edit_message_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        return func(update, context, *args, **kwargs)
    return wrapped

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

def main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üîå –í–∫–ª—é—á–∏—Ç—å", callback_data='wol'),
            InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data='shutdown_confirm'),
        ],
        [
            InlineKeyboardButton("üü¢ –°—Ç–∞—Ç—É—Å", callback_data='status')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def check_ssh_key_exists(key_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ SSH –∫–ª—é—á–∞"""
    if not os.path.exists(key_path):
        logger.error(f"SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {key_path}")
        return False
    return True

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

@restricted
def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id if user is not None else 'unknown'
    logger.info(f"User {user_id} started the bot")
    
    if update.message:
        update.message.reply_text(
            "üöÄ **–°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )

@restricted
def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    query.answer()
    
    data = query.data
    logger.info(f"User {query.from_user.id} pressed button: {data}")
    
    handlers = {
        'wol': wake_on_lan_callback,
        'shutdown_confirm': shutdown_confirm_callback,
        'shutdown_yes': shutdown_server_callback,
        'cancel': cancel_callback,
        'status': server_status_callback,
        'back_to_menu': back_to_menu_callback
    }
    
    handler = handlers.get(data)
    if handler:
        handler(query, context)
    else:
        logger.warning(f"Unknown callback data: {data}")
        query.edit_message_text(
            "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
            reply_markup=main_menu_keyboard()
        )

# --- Callback —Ñ—É–Ω–∫—Ü–∏–∏ ---

def wake_on_lan_callback(query, context):
    """–í–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ Wake-on-LAN"""
    query.edit_message_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSH –∫–ª—é—á
    if not check_ssh_key_exists(ROUTER_SSH_KEY_PATH):
        query.edit_message_text(
            "‚ö†Ô∏è **–û—à–∏–±–∫–∞:** SSH –∫–ª—é—á –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
        return
    
    client = None
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–æ—É—Ç–µ—Ä—É
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        private_key = paramiko.RSAKey.from_private_key_file(ROUTER_SSH_KEY_PATH)
        
        client.connect(
            ROUTER_SSH_HOST,
            port=ROUTER_SSH_PORT,
            username=ROUTER_SSH_USER,
            pkey=private_key,
            timeout=SSH_TIMEOUT
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É WOL
        command = f"etherwake -i br-lan {SERVER_MAC}"
        stdin, stdout, stderr = client.exec_command(command, timeout=SSH_TIMEOUT)
        
        output = stdout.read().decode('utf-8', errors='replace').strip()
        error = stderr.read().decode('utf-8', errors='replace').strip()
        
        logger.info(f"WOL output: {output}")
        if error:
            logger.error(f"WOL error: {error}")
        
        if error:
            query.edit_message_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:**\n`{escape_markdown(error)}`",
                parse_mode='Markdown',
                reply_markup=main_menu_keyboard()
            )
        else:
            query.edit_message_text(
                "üîå **Magic packet –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n–°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥.",
                parse_mode='Markdown',
                reply_markup=main_menu_keyboard()
            )
            
    except paramiko.AuthenticationException:
        logger.error("SSH Authentication failed")
        query.edit_message_text(
            "‚ö†Ô∏è **–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SSH**\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
    except paramiko.SSHException as e:
        logger.error(f"SSH Error: {e}")
        query.edit_message_text(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ SSH:** `{escape_markdown(str(e))}`",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"WOL Error: {e}", exc_info=True)
        query.edit_message_text(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–æ—É—Ç–µ—Ä—É:**\n`{escape_markdown(str(e))}`\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSH-—Ç—É–Ω–Ω–µ–ª—å.",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
    finally:
        if client:
            client.close()

def shutdown_confirm_callback(query, context):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è"""
    confirm_keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞, –≤—ã–∫–ª—é—á–∏—Ç—å", callback_data='shutdown_yes'),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
        ]
    ])
    
    query.edit_message_text(
        "‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?",
        parse_mode='Markdown',
        reply_markup=confirm_keyboard
    )

def shutdown_server_callback(query, context):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    query.edit_message_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSH –∫–ª—é—á
    if not check_ssh_key_exists(SERVER_SSH_KEY_PATH):
        query.edit_message_text(
            "‚ö†Ô∏è **–û—à–∏–±–∫–∞:** SSH –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
        return
    
    client = None
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        private_key = paramiko.RSAKey.from_private_key_file(SERVER_SSH_KEY_PATH)
        
        client.connect(
            SERVER_SSH_HOST,
            port=SERVER_SSH_PORT,
            username=SERVER_SSH_USER,
            pkey=private_key,
            timeout=SSH_TIMEOUT
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã–∫–ª—é—á–µ–Ω–∏—è
        stdin, stdout, stderr = client.exec_command("sudo /sbin/shutdown -h now", timeout=SSH_TIMEOUT)
        
        error = stderr.read().decode('utf-8', errors='replace').strip()
        
        if error and "sudo" not in error.lower():  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è sudo
            logger.error(f"Shutdown error: {error}")
            query.edit_message_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏:**\n`{escape_markdown(error)}`",
                parse_mode='Markdown',
                reply_markup=main_menu_keyboard()
            )
        else:
            query.edit_message_text(
                "üî¥ **–ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.",
                parse_mode='Markdown',
                reply_markup=main_menu_keyboard()
            )
            
    except paramiko.AuthenticationException:
        logger.error("SSH Authentication failed")
        query.edit_message_text(
            "‚ö†Ô∏è **–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SSH**\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"Shutdown Error: {e}", exc_info=True)
        query.edit_message_text(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:**\n`{escape_markdown(str(e))}`\n\n–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ —Ç—É–Ω–Ω–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
    finally:
        if client:
            client.close()

def server_status_callback(query, context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    query.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH –ø–æ—Ä—Ç–∞
        result = subprocess.run(
            ["nc", "-z", "-w", str(NC_TIMEOUT), SERVER_SSH_HOST, str(SERVER_SSH_PORT)],
            capture_output=True,
            text=True,
            timeout=NC_TIMEOUT + 2
        )
        
        if result.returncode == 0:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ SSH –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            client = None
            try:
                if check_ssh_key_exists(SERVER_SSH_KEY_PATH):
                    client = paramiko.SSHClient()
                    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    private_key = paramiko.RSAKey.from_private_key_file(SERVER_SSH_KEY_PATH)
                    
                    client.connect(
                        SERVER_SSH_HOST,
                        port=SERVER_SSH_PORT,
                        username=SERVER_SSH_USER,
                        pkey=private_key,
                        timeout=5
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º uptime
                    stdin, stdout, stderr = client.exec_command("uptime", timeout=5)
                    uptime_info = stdout.read().decode('utf-8', errors='replace').strip()
                    
                    query.edit_message_text(
                        f"üü¢ **–°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω**\n\n`{escape_markdown(uptime_info)}`",
                        parse_mode='Markdown',
                        reply_markup=main_menu_keyboard()
                    )
                else:
                    query.edit_message_text(
                        "üü¢ **–°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω**\n\nSSH-—Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω.",
                        parse_mode='Markdown',
                        reply_markup=main_menu_keyboard()
                    )
                    
            except Exception as e:
                logger.warning(f"Could not get detailed status: {e}")
                query.edit_message_text(
                    "üü¢ **–°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω**\n\nSSH-—Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω.",
                    parse_mode='Markdown',
                    reply_markup=main_menu_keyboard()
                )
            finally:
                if client:
                    client.close()
        else:
            query.edit_message_text(
                "üî¥ **–°–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω**\n\nSSH-—Ç—É–Ω–Ω–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.",
                parse_mode='Markdown',
                reply_markup=main_menu_keyboard()
            )
            
    except subprocess.TimeoutExpired:
        query.edit_message_text(
            "‚ö†Ô∏è **–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞**\n\n–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"Status Check Error: {e}", exc_info=True)
        query.edit_message_text(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:**\n`{escape_markdown(str(e))}`",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )

def cancel_callback(query, context):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    query.edit_message_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=main_menu_keyboard()
    )

def back_to_menu_callback(query, context):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query.edit_message_text(
        "üöÄ **–°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

def error_handler(update: object, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}", exc_info=True)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        from telegram import Update as TgUpdate
        if isinstance(update, TgUpdate) and update.effective_message:
            update.effective_message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=main_menu_keyboard()
            )
    except:
        pass

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSH –∫–ª—é—á–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    missing_keys = []
    if not os.path.exists(ROUTER_SSH_KEY_PATH):
        missing_keys.append(f"Router key: {ROUTER_SSH_KEY_PATH}")
    if not os.path.exists(SERVER_SSH_KEY_PATH):
        missing_keys.append(f"Server key: {SERVER_SSH_KEY_PATH}")
    
    if missing_keys:
        logger.error(f"SSH –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:\n" + "\n".join(missing_keys))
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker-—Ç–æ–º –∏ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–ª—é—á–µ–π.")
        return
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
        return
    
    if not ALLOWED_USERS:
        logger.error("ALLOWED_USERS –Ω–µ –∑–∞–¥–∞–Ω—ã!")
        return
    
    logger.info(f"Starting bot with allowed users: {ALLOWED_USERS}")
    
    # –°–æ–∑–¥–∞–µ–º updater
    updater = Updater(BOT_TOKEN, use_context=True)
    
    if not updater:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Updater!")
        return
    
    dispatcher = updater.dispatcher
    
    if dispatcher is None:
        logger.error("Dispatcher is None!")
        return
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    dispatcher.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        updater.start_polling(drop_pending_updates=True)
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        updater.idle()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

if __name__ == '__main__':
    main()
