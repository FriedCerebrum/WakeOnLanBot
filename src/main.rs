use std::{env, net::TcpStream, path::Path, time::Duration, io::Read, collections::HashMap, sync::Mutex};

use anyhow::{Result};
use ssh2::Session;
use teloxide::{
    prelude::*,
    types::{InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, CallbackQuery},
    utils::command::BotCommands,
};
use std::sync::Arc;

mod handler;

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ –∫–Ω–æ–ø–æ–∫
lazy_static::lazy_static! {
    static ref BUTTON_LOCKS: Arc<Mutex<HashMap<u64, std::time::Instant>>> = Arc::new(Mutex::new(HashMap::new()));
}

#[cfg(test)]
mod tests;

#[tokio::main]
async fn main() {
    // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –†–ê–ù–ù–Ø–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    println!("=== –°–¢–ê–†–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===");
    println!("Rust –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
    println!("–í–µ—Ä—Å–∏—è Rust: {}", env!("CARGO_PKG_RUST_VERSION", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"));
    println!("–ü–∞–∫–µ—Ç: {} v{}", env!("CARGO_PKG_NAME"), env!("CARGO_PKG_VERSION"));
    println!("Teloxide –≤–µ—Ä—Å–∏—è: {}", option_env!("CARGO_PKG_VERSION_teloxide").unwrap_or("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –î–û –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞
    println!("=== –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===");
    match env::var("BOT_TOKEN") {
        Ok(token) => println!("BOT_TOKEN: –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {})", token.len()),
        Err(_) => println!("BOT_TOKEN: –ù–ï –ù–ê–ô–î–ï–ù!"),
    }
    
    match env::var("ALLOWED_USERS") {
        Ok(users) => println!("ALLOWED_USERS: '{}'", users),
        Err(_) => println!("ALLOWED_USERS: –ù–ï –ù–ê–ô–î–ï–ù!"),
    }
    
    match env::var("SERVER_MAC") {
        Ok(mac) => println!("SERVER_MAC: '{}'", mac),
        Err(_) => println!("SERVER_MAC: –ù–ï –ù–ê–ô–î–ï–ù!"),
    }
    println!("=== –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –ü–ï–†–ï–ú–ï–ù–ù–´–• ===");
    
    if let Err(e) = run().await {
        eprintln!("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {:#}", e);
        std::process::exit(1);
    }
}

async fn run() -> Result<()> {
    println!("=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –õ–û–ì–ì–ï–†–ê ===");
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    pretty_env_logger::init();
    println!("–õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    log::info!("–ó–∞–ø—É—Å–∫ WakeOnLanBot...");

    println!("=== –ß–¢–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===");
    // –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    let config = Config::from_env()?;
    println!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    log::info!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");

    println!("=== –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê ===");
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    let bot = Bot::new(config.bot_token.clone());
    println!("–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    log::info!("–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å Telegram API
    println!("=== –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ò –° TELEGRAM API ===");
    match bot.get_me().await {
        Ok(me) => {
            println!("‚úÖ –°–≤—è–∑—å —Å Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç!");
            println!("   –ò–º—è –±–æ—Ç–∞: {}", me.first_name);
            println!("   Username: @{}", me.username.as_ref().map(|s| s.as_str()).unwrap_or("–ù–ï–¢"));
            log::info!("Telegram API –æ—Ç–≤–µ—á–∞–µ—Ç, –±–æ—Ç: {}", me.first_name);
        },
        Err(e) => {
            println!("‚ùå –û–®–ò–ë–ö–ê —Å–≤—è–∑–∏ —Å Telegram API: {}", e);
            log::error!("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Telegram API: {}", e);
            return Err(anyhow::anyhow!("–ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API: {}", e));
        }
    }

    let cfg = Arc::new(config);

    println!("=== –ó–ê–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ===");
    log::info!("–ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π...");
    
    // –í–∞–∂–Ω–æ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    println!("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)");
    handler::run(bot.clone(), cfg.clone()).await;
    
    // –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (—á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
    println!("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è!");
    log::error!("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ!");

    Ok(())
}

#[derive(Clone)]
struct Config {
    bot_token: String,
    allowed_users: Vec<i64>,
    server_mac: String,

    router_ssh_host: String,
    router_ssh_port: u16,
    router_ssh_user: String,
    router_ssh_key: String,

    server_ssh_host: String,
    server_ssh_port: u16,
    server_ssh_user: String,
    server_ssh_key: String,

    ssh_timeout: Duration,
    nc_timeout: Duration,
}

impl Config {
    fn from_env() -> Result<Self> {
        println!("=== –î–ï–¢–ê–õ–¨–ù–û–ï –ß–¢–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===");
        log::info!("–ù–∞—á–∏–Ω–∞—é —á—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...");
        
        println!("–ß–∏—Ç–∞—é BOT_TOKEN...");
        let bot_token = match env::var("BOT_TOKEN") {
            Ok(token) => {
                println!("BOT_TOKEN –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ (–¥–ª–∏–Ω–∞: {})", token.len());
                token
            },
            Err(e) => {
                println!("–û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", e);
                return Err(anyhow::anyhow!("BOT_TOKEN –ø—É—Å—Ç"));
            }
        };
        log::info!("BOT_TOKEN –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ");
        
        println!("–ß–∏—Ç–∞—é ALLOWED_USERS...");
        let allowed_users_str = env::var("ALLOWED_USERS").unwrap_or_default();
        println!("ALLOWED_USERS —Å—Ç—Ä–æ–∫–∞: '{}'", allowed_users_str);
        log::info!("ALLOWED_USERS —Å—Ç—Ä–æ–∫–∞: '{}'", allowed_users_str);
        
        let allowed_users = allowed_users_str
            .split(',')
            .filter_map(|s| s.trim().parse::<i64>().ok())
            .collect::<Vec<_>>();
        println!("ALLOWED_USERS —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã: {:?}", allowed_users);
        log::info!("ALLOWED_USERS —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã: {:?}", allowed_users);
        
        println!("–ß–∏—Ç–∞—é SERVER_MAC...");
        let server_mac = match env::var("SERVER_MAC") {
            Ok(mac) => {
                // –í–∞–ª–∏–¥–∏—Ä—É–µ–º MAC –∞–¥—Ä–µ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if !is_valid_mac(&mac) {
                    println!("–û–®–ò–ë–ö–ê: SERVER_MAC –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: '{}'", mac);
                    return Err(anyhow::anyhow!("SERVER_MAC –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"));
                }
                println!("SERVER_MAC –ø—Ä–æ—á–∏—Ç–∞–Ω –∏ –≤–∞–ª–∏–¥–µ–Ω: '{}'", mac);
                mac
            },
            Err(e) => {
                println!("–û–®–ò–ë–ö–ê: SERVER_MAC –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", e);
                return Err(anyhow::anyhow!("SERVER_MAC –ø—É—Å—Ç"));
            }
        };
        log::info!("SERVER_MAC –ø—Ä–æ—á–∏—Ç–∞–Ω: '{}'", server_mac);

        if allowed_users.is_empty() {
            println!("–û–®–ò–ë–ö–ê: ALLOWED_USERS —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞!");
            anyhow::bail!("ALLOWED_USERS –ø—É—Å—Ç");
        }

        println!("–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");
        log::info!("–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");

        Ok(Self {
            bot_token,
            allowed_users,
            server_mac,

            router_ssh_host: env::var("ROUTER_SSH_HOST").unwrap_or_else(|_| "localhost".into()),
            router_ssh_port: env::var("ROUTER_SSH_PORT")
                .ok()
                .and_then(|s| s.parse().ok())
                .unwrap_or(2223),
            router_ssh_user: env::var("ROUTER_SSH_USER").unwrap_or_else(|_| "root".into()),
            router_ssh_key: env::var("ROUTER_SSH_KEY_PATH").unwrap_or_else(|_| "/app/keys/id_router_vps_rsa_legacy".into()),

            server_ssh_host: env::var("SERVER_SSH_HOST").unwrap_or_else(|_| "localhost".into()),
            server_ssh_port: env::var("SERVER_SSH_PORT")
                .ok()
                .and_then(|s| s.parse().ok())
                .unwrap_or(2222),
            server_ssh_user: env::var("SERVER_SSH_USER").unwrap_or_else(|_| "friedcerebrum".into()),
            server_ssh_key: env::var("SERVER_SSH_KEY_PATH").unwrap_or_else(|_| "/app/keys/id_rsa".into()),

            ssh_timeout: Duration::from_secs(
                env::var("SSH_TIMEOUT")
                    .ok()
                    .and_then(|s| s.parse().ok())
                    .unwrap_or(15), // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            ),
            nc_timeout: Duration::from_secs(
                env::var("NC_TIMEOUT")
                    .ok()
                    .and_then(|s| s.parse().ok())
                    .unwrap_or(5), // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            ),
        })
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ MAC –∞–¥—Ä–µ—Å–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
fn is_valid_mac(mac: &str) -> bool {
    let mac_regex = regex::Regex::new(r"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$").unwrap();
    mac_regex.is_match(mac)
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫
fn check_button_debounce(user_id: u64) -> bool {
    let mut locks = BUTTON_LOCKS.lock().unwrap();
    let now = std::time::Instant::now();
    
    if let Some(last_press) = locks.get(&user_id) {
        if now.duration_since(*last_press) < Duration::from_secs(2) {
            return false; // –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –Ω–∞–∂–∏–º–∞–µ—Ç
        }
    }
    
    locks.insert(user_id, now);
    true
}

// --------------------------------------------------
#[derive(BotCommands)]
#[command(rename_rule = "lowercase", description = "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")]
enum Command {
    #[command(description = "–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    Start,
}

fn is_allowed(config: &Config, user_id: Option<u64>) -> bool {
    match user_id {
        Some(uid) => {
            let uid = uid as i64;
            let allowed = config.allowed_users.contains(&uid);
            println!("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} -> {}", uid, allowed);
            log::info!("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} -> {}", uid, allowed);
            allowed
        },
        None => {
            println!("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å None -> false");
            log::warn!("–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ user_id");
            false
        },
    }
}

async fn send_main_menu(bot: &Bot, msg: &Message, _config: &Config) -> Result<()> {
    println!("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
    let keyboard = main_keyboard();
    println!("‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {:?}", keyboard);
    log::info!("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π");
    
    bot.send_message(msg.chat.id, "üöÄ –°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        .parse_mode(ParseMode::MarkdownV2)
        .reply_markup(keyboard)
        .await?;
    println!("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
    Ok(())
}

fn main_keyboard() -> InlineKeyboardMarkup {
    InlineKeyboardMarkup::new(vec![
        vec![
            InlineKeyboardButton::callback("üîå –í–∫–ª—é—á–∏—Ç—å", "wol"),
            InlineKeyboardButton::callback("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", "shutdown_confirm"),
        ],
        vec![InlineKeyboardButton::callback("üü¢ –°—Ç–∞—Ç—É—Å", "status")],
    ])
}

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
fn establish_ssh_connection(
    host: &str,
    port: u16,
    user: &str,
    key_path: &str,
    timeout: Duration,
) -> Result<Session> {
    log::info!("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {}:{}", host, port);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º localhost –≤ 127.0.0.1 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    let resolved_host = if host == "localhost" {
        "127.0.0.1"
    } else {
        host
    };
    
    let addr = format!("{}:{}", resolved_host, port);
    log::debug!("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–¥—Ä–µ—Å—É: {}", addr);
    
    let tcp = TcpStream::connect_timeout(
        &addr.parse()?,
        timeout,
    )?;

    let mut sess = Session::new()?;
    sess.set_tcp_stream(tcp);
    sess.handshake()?;
    
    sess.userauth_pubkey_file(user, None, Path::new(key_path), None)?;

    if !sess.authenticated() {
        log::error!("SSH –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {}@{}:{}", user, host, port);
        anyhow::bail!("SSH –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å");
    }
    
    log::info!("SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
    Ok(sess)
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback query —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
async fn safe_answer_callback_query(bot: &Bot, callback_id: &str) -> Result<()> {
    match bot.answer_callback_query(callback_id).await {
        Ok(_) => {
            log::debug!("Callback query –æ—Ç–≤–µ—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            Ok(())
        },
        Err(e) => {
            log::warn!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {}", e);
            // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç.–∫. —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            Ok(())
        }
    }
}

async fn handle_wol(bot: &Bot, q: &CallbackQuery, config: &Config) -> Result<()> {
    let user_id = q.from.id.0;
    println!("üîå WOL Handler: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user_id);
    log::info!("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WOL –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user_id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥
    if !check_button_debounce(user_id) {
        log::warn!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ", user_id);
        safe_answer_callback_query(bot, &q.id).await?;
        if let Some(msg) = &q.message {
            bot.edit_message_text(msg.chat.id, msg.id, "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –Ω–∞–∂–∞—Ç–∏–µ–º")
                .await?;
        }
        return Ok(());
    }
    
    safe_answer_callback_query(bot, &q.id).await?;
    
    if let Some(msg) = &q.message {
        bot.edit_message_text(msg.chat.id, msg.id, "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ...")
            .await?;
    }

    match tokio::task::spawn_blocking({
        let cfg = config.clone();
        move || send_wol(&cfg)
    })
    .await?
    {
        Ok(_) => {
            if let Some(msg) = &q.message {
                bot.edit_message_text(
                    msg.chat.id,
                    msg.id,
                    "üîå Magic packet –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥.",
                )
                .reply_markup(main_keyboard())
                .await?;
            }
        }
        Err(e) => {
            log::error!("–û—à–∏–±–∫–∞ WOL: {}", e);
            if let Some(msg) = &q.message {
                bot.edit_message_text(
                    msg.chat.id, 
                    msg.id, 
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤–∫–ª—é—á–µ–Ω–∏—è.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏."
                )
                .reply_markup(main_keyboard())
                .await?;
            }
        }
    }

    Ok(())
}

fn send_wol(config: &Config) -> Result<()> {
    let sess = establish_ssh_connection(
        &config.router_ssh_host,
        config.router_ssh_port,
        &config.router_ssh_user,
        &config.router_ssh_key,
        config.ssh_timeout,
    )?;

    let mut ch = sess.channel_session()?;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    let safe_mac = config.server_mac.replace(|c: char| !c.is_ascii_hexdigit() && c != ':' && c != '-', "");
    let command = format!("etherwake -i br-lan {}", safe_mac);
    
    log::info!("–í—ã–ø–æ–ª–Ω—è–µ–º WOL –∫–æ–º–∞–Ω–¥—É: {}", command);
    ch.exec(&command)?;
    ch.close()?;
    
    Ok(())
}

async fn ask_shutdown_confirm(bot: &Bot, q: &CallbackQuery) -> Result<()> {
    let user_id = q.from.id.0;
    println!("üî¥ Shutdown Confirm Handler: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user_id);
    log::info!("–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user_id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥
    if !check_button_debounce(user_id) {
        log::warn!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ", user_id);
        safe_answer_callback_query(bot, &q.id).await?;
        return Ok(());
    }
    
    safe_answer_callback_query(bot, &q.id).await?;
    
    if let Some(msg) = &q.message {
        let kb = InlineKeyboardMarkup::new(vec![vec![
            InlineKeyboardButton::callback("‚úÖ –î–∞, –≤—ã–∫–ª—é—á–∏—Ç—å", "shutdown_yes"),
            InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel"),
        ]]);
        bot.edit_message_text(msg.chat.id, msg.id, "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?")
            .parse_mode(ParseMode::MarkdownV2)
            .reply_markup(kb)
            .await?;
    }
    Ok(())
}

async fn handle_shutdown(bot: &Bot, q: &CallbackQuery, config: &Config) -> Result<()> {
    let user_id = q.from.id.0;
    log::info!("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user_id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥
    if !check_button_debounce(user_id) {
        log::warn!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ", user_id);
        safe_answer_callback_query(bot, &q.id).await?;
        return Ok(());
    }
    
    safe_answer_callback_query(bot, &q.id).await?;
    
    if let Some(msg) = &q.message {
        bot.edit_message_text(msg.chat.id, msg.id, "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ...")
            .await?;
    }

    match tokio::task::spawn_blocking({
        let cfg = config.clone();
        move || send_shutdown(&cfg)
    })
    .await?
    {
        Ok(_) => {
            if let Some(msg) = &q.message {
                bot.edit_message_text(
                    msg.chat.id, 
                    msg.id, 
                    "üî¥ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!"
                )
                .reply_markup(main_keyboard())
                .await?;
            }
        }
        Err(e) => {
            log::error!("–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {}", e);
            if let Some(msg) = &q.message {
                bot.edit_message_text(
                    msg.chat.id, 
                    msg.id, 
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤—ã–∫–ª—é—á–µ–Ω–∏—è.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSH."
                )
                .reply_markup(main_keyboard())
                .await?;
            }
        }
    }
    Ok(())
}

fn send_shutdown(config: &Config) -> Result<()> {
    let sess = establish_ssh_connection(
        &config.server_ssh_host,
        config.server_ssh_port,
        &config.server_ssh_user,
        &config.server_ssh_key,
        config.ssh_timeout,
    )?;

    let mut ch = sess.channel_session()?;
    
    log::info!("–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã–∫–ª—é—á–µ–Ω–∏—è");
    ch.exec("sudo /sbin/shutdown -h now")?;
    ch.close()?;
    
    Ok(())
}

async fn handle_status(bot: &Bot, q: &CallbackQuery, config: &Config) -> Result<()> {
    let user_id = q.from.id.0;
    println!("üü¢ Status Handler: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user_id);
    log::info!("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user_id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥
    if !check_button_debounce(user_id) {
        log::warn!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ", user_id);
        safe_answer_callback_query(bot, &q.id).await?;
        return Ok(());
    }
    
    safe_answer_callback_query(bot, &q.id).await?;
    
    if let Some(msg) = &q.message {
        bot.edit_message_text(msg.chat.id, msg.id, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...")
            .await?;
    }

    match tokio::time::timeout(config.nc_timeout, check_status(config.clone())).await {
        Ok(Ok(info)) => {
            if let Some(msg) = &q.message {
                bot.edit_message_text(msg.chat.id, msg.id, info)
                    .reply_markup(main_keyboard())
                    .await?;
            }
        }
        Ok(Err(e)) => {
            log::error!("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {}", e);
            if let Some(msg) = &q.message {
                bot.edit_message_text(
                    msg.chat.id, 
                    msg.id, 
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSH."
                )
                .reply_markup(main_keyboard())
                .await?;
            }
        }
        Err(_) => {
            if let Some(msg) = &q.message {
                bot.edit_message_text(
                    msg.chat.id, 
                    msg.id, 
                    "‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞!"
                )
                .reply_markup(main_keyboard())
                .await?;
            }
        }
    }

    Ok(())
}

async fn check_status(config: Config) -> Result<String> {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º localhost –≤ 127.0.0.1 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    let resolved_host = if config.server_ssh_host == "localhost" {
        "127.0.0.1"
    } else {
        &config.server_ssh_host
    };
    
    let addr = format!("{}:{}", resolved_host, config.server_ssh_port);
    log::debug!("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –∞–¥—Ä–µ—Å—É: {}", addr);
    
    match tokio::net::TcpStream::connect(addr.clone()).await {
        Ok(_) => {
            // –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å uptime
            match tokio::task::spawn_blocking(move || {
                let sess = establish_ssh_connection(
                    &config.server_ssh_host,
                    config.server_ssh_port,
                    &config.server_ssh_user,
                    &config.server_ssh_key,
                    config.ssh_timeout,
                )?;
                
                let mut ch = sess.channel_session()?;
                ch.exec("uptime")?;
                let mut s = String::new();
                ch.read_to_string(&mut s)?;
                ch.close()?;
                Ok::<_, anyhow::Error>(format!("üü¢ –°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω\n\n{}", s.trim()))
            })
            .await
            {
                Ok(Ok(s)) => Ok(s),
                Ok(Err(e)) => {
                    log::warn!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å uptime: {}", e);
                    Ok("üü¢ –°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω\n\nSSH-—Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω.".into())
                },
                Err(_) => Ok("üü¢ –°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω\n\nSSH-—Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω.".into()),
            }
        }
        Err(_) => Ok("üî¥ –°–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω\n\nSSH-—Ç—É–Ω–Ω–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.".into()),
    }
}

async fn cancel(bot: &Bot, q: &CallbackQuery) -> Result<()> {
    log::info!("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", q.from.id.0);
    
    safe_answer_callback_query(bot, &q.id).await?;
    
    if let Some(msg) = &q.message {
        bot.edit_message_text(msg.chat.id, msg.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            .reply_markup(main_keyboard())
            .await?;
    }
    Ok(())
}
// Note: Handler functions are now directly integrated into the dispatcher
// These were the original wrapper functions that are no longer needed 