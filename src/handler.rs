use std::sync::Arc;
use teloxide::prelude::*;

use crate::Config;

pub async fn run(bot: Bot, cfg: Arc<Config>) {
    println!("=== –ù–ê–ß–ê–õ–û –ó–ê–ü–£–°–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ===");
    log::info!("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π...");
    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π webhook
    println!("–£–¥–∞–ª—è–µ–º webhook (–µ—Å–ª–∏ –µ—Å—Ç—å)...");
    if let Err(e) = bot.delete_webhook().await {
        log::warn!("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {}", e);
        println!("–í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {}", e);
    } else {
        log::info!("Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        println!("Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }
    
    println!("–°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π...");
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    let handler = ::dptree::entry()
        .branch(Update::filter_message().endpoint(message_handler))
        .branch(Update::filter_callback_query().endpoint(callback_handler));
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    let mut dispatcher = Dispatcher::builder(bot.clone(), handler)
        .dependencies(::dptree::deps![cfg.clone()])
        .default_handler(|upd| async move {
            log::warn!("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {:?}", upd);
        })
        .error_handler(LoggingErrorHandler::with_custom_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ",
        ))
        .enable_ctrlc_handler()
        .build();
    
    println!("–î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    log::info!("–ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä...");
    
    dispatcher.dispatch().await;
}

async fn message_handler(bot: Bot, msg: Message, cfg: Arc<Config>) -> ResponseResult<()> {
    println!("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    log::info!("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {:?}", msg.from().map(|u| u.id.0));
    
    let user_id = msg.from().as_ref().map(|u| u.id.0);
    if !crate::is_allowed(&cfg, user_id) {
        println!("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {:?} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", user_id);
        log::warn!("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {:?}", user_id);
        return Ok(());
    }
    
    if let Some(text) = msg.text() {
        println!("üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{}'", text);
        match text.to_lowercase().as_str() {
            "/start" | "/wol" => {
                println!("üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É {}", text);
                match crate::send_main_menu(&bot, &msg, &cfg).await {
                    Ok(_) => {
                        println!("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                        log::info!("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {:?}", user_id);
                    },
                    Err(e) => {
                        println!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {}", e);
                        log::error!("Error sending main menu: {}", e);
                    },
                }
            }
            _ => {
                println!("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{}'", text);
                log::warn!("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {:?}", text, user_id);
            }
        }
    }
    
    Ok(())
}

async fn callback_handler(bot: Bot, q: CallbackQuery, cfg: Arc<Config>) -> ResponseResult<()> {
    println!("üîî –ü–æ–ª—É—á–µ–Ω CALLBACK QUERY!");
    println!("üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", q.from.id.0);
    println!("üìä Callback data: {:?}", q.data);
    println!("üîç –ü–æ–ª–Ω—ã–π callback query: {:?}", q);
    log::info!("–ü–æ–ª—É—á–µ–Ω callback query: '{:?}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", q.data, q.from.id.0);
    
    let user_id = Some(q.from.id.0);
    if !crate::is_allowed(&cfg, user_id) {
        println!("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è callback", q.from.id.0);
        log::warn!("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", q.from.id.0);
        
        // –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if let Err(e) = crate::safe_answer_callback_query(&bot, &q.id).await {
            log::error!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π callback: {}", e);
        }
        return Ok(());
    }
    
    if let Some(data) = q.data.as_deref() {
        println!("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback data: '{}'", data);
        log::info!("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query: '{}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", data, q.from.id.0);
        
        let result = match data {
            "wol" => {
                println!("üîå –ó–∞–ø—É—Å–∫ WOL handler");
                crate::handle_wol(&bot, &q, &cfg).await
            },
            "shutdown_confirm" => {
                println!("üî¥ –ó–∞–ø—É—Å–∫ shutdown confirm handler");
                crate::ask_shutdown_confirm(&bot, &q).await
            },
            "shutdown_yes" => {
                println!("üíÄ –ó–∞–ø—É—Å–∫ shutdown handler");
                crate::handle_shutdown(&bot, &q, &cfg).await
            },
            "status" => {
                println!("üü¢ –ó–∞–ø—É—Å–∫ status handler");
                crate::handle_status(&bot, &q, &cfg).await
            },
            "cancel" => {
                println!("‚ùå –ó–∞–ø—É—Å–∫ cancel handler");
                crate::cancel(&bot, &q).await
            },
            _ => {
                println!("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data: '{}'", data);
                log::warn!("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data: '{}'", data);
                
                // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query
                if let Err(e) = crate::safe_answer_callback_query(&bot, &q.id).await {
                    log::error!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {}", e);
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                if let Some(msg) = &q.message {
                    if let Err(e) = bot.edit_message_text(
                        msg.chat.id,
                        msg.id,
                        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
                    )
                    .reply_markup(crate::main_keyboard())
                    .await {
                        log::error!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {}", e);
                    }
                }
                
                Ok(())
            },
        };
        
        match result {
            Ok(_) => {
                println!("‚úÖ Callback handler '{}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", data);
                log::info!("Callback handler '{}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", data);
            },
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ –≤ callback handler '{}': {}", data, e);
                log::error!("Callback handler error for {}: {}", data, e);
                
                // –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
                if let Some(msg) = &q.message {
                    if let Err(edit_err) = bot.edit_message_text(
                        msg.chat.id,
                        msg.id,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    .reply_markup(crate::main_keyboard())
                    .await {
                        log::error!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—â–µ–π –æ—à–∏–±–∫–µ: {}", edit_err);
                    }
                }
            }
        }
    } else {
        println!("‚ö†Ô∏è Callback query –±–µ–∑ data");
        log::warn!("–ü–æ–ª—É—á–µ–Ω callback query –±–µ–∑ data");
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –±–µ–∑ data
        if let Err(e) = crate::safe_answer_callback_query(&bot, &q.id).await {
            log::error!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback –±–µ–∑ data: {}", e);
        }
    }
    
    Ok(())
} 