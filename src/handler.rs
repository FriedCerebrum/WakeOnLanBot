use std::sync::Arc;
use teloxide::prelude::*;

use crate::Config;

pub async fn run(bot: Bot, cfg: Arc<Config>) {
    println!("=== –ù–ê–ß–ê–õ–û –ó–ê–ü–£–°–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ===");
    log::info!("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π...");
    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π webhook
    println!("–£–¥–∞–ª—è–µ–º webhook (–µ—Å–ª–∏ –µ—Å—Ç—å)...");
    if let Err(e) = bot.delete_webhook().await {
        log::warn!("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {}", e);
        println!("–í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {}", e);
    } else {
        log::info!("Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        println!("Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }
    
    println!("–°–æ–∑–¥–∞–µ–º listener –¥–ª—è polling...");
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º polling —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    use teloxide::types::AllowedUpdate;
    use teloxide::update_listeners::Polling;
    let allowed_updates = vec![
        AllowedUpdate::Message,
        AllowedUpdate::CallbackQuery,
    ];
    
    let listener = Polling::builder(bot.clone())
        .timeout(std::time::Duration::from_secs(10))
        .limit(100)
        .allowed_updates(allowed_updates)
        .build();
    
    log::info!("Polling listener —Å–æ–∑–¥–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Message –∏ CallbackQuery");
    println!("Polling listener —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–Ω–æ–ø–æ–∫");
    println!("üìã –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {:?}", allowed_updates);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ polling
    println!("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã polling...");
    // –í teloxide 0.12 –º—ã –º–æ–∂–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å timeout –∏ –ª–∏–º–∏—Ç—ã
    
    println!("–ó–∞–ø—É—Å–∫–∞–µ–º REPL...");
    log::info!("–ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π...");

    teloxide::repl_with_listener(
        bot.clone(),
        {
            let cfg = cfg.clone();
            move |bot: Bot, upd: Update| {
                let cfg = cfg.clone();
                async move {
                    println!("=== –ü–û–õ–£–ß–ï–ù–û –û–ë–ù–û–í–õ–ï–ù–ò–ï ===");
                    println!("üîç –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {:?}", upd.kind);
                    log::info!("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {:?}", upd.kind);
                    
                    match handle_update(bot, upd, cfg).await {
                        Ok(_) => {
                            println!("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ");
                            log::info!("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ");
                        },
                        Err(e) => {
                            println!("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e);
                            log::error!("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e);
                        }
                    }
                    Ok(())
                }
            }
        },
        listener,
    )
    .await;
}

async fn handle_update(bot: Bot, upd: Update, cfg: Arc<Config>) -> ResponseResult<()> {
    match upd.kind {
        teloxide::types::UpdateKind::Message(msg) => {
            println!("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            log::info!("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {:?}", msg.from().map(|u| u.id.0));
            
            let user_id = msg.from().as_ref().map(|u| u.id.0);
            if !crate::is_allowed(&cfg, user_id) {
                println!("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {:?} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", user_id);
                log::warn!("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {:?}", user_id);
                return Ok(());
            }
            
            if let Some(text) = msg.text() {
                println!("üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{}'", text);
                match text.to_lowercase().as_str() {
                    "/start" | "/wol" => {
                        println!("üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É {}", text);
                        match crate::send_main_menu(&bot, &msg, &cfg).await {
                            Ok(_) => {
                                println!("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                                log::info!("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {:?}", user_id);
                            },
                            Err(e) => {
                                println!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {}", e);
                                log::error!("Error sending main menu: {}", e);
                            },
                        }
                    }
                    _ => {
                        println!("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{}'", text);
                        log::warn!("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {:?}", text, user_id);
                    }
                }
            }
        }
        teloxide::types::UpdateKind::CallbackQuery(q) => {
            println!("üîî –ü–æ–ª—É—á–µ–Ω CALLBACK QUERY!");
            println!("üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", q.from.id.0);
            println!("üìä Callback data: {:?}", q.data);
            println!("üîç –ü–æ–ª–Ω—ã–π callback query: {:?}", q);
            log::info!("–ü–æ–ª—É—á–µ–Ω callback query: '{:?}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", q.data, q.from.id.0);
            
            let user_id = Some(q.from.id.0);
            if !crate::is_allowed(&cfg, user_id) {
                println!("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è callback", q.from.id.0);
                log::warn!("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", q.from.id.0);
                return Ok(());
            }
            
            if let Some(data) = q.data.as_deref() {
                println!("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback data: '{}'", data);
                log::info!("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query: '{}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", data, q.from.id.0);
                
                let result = match data {
                    "wol" => {
                        println!("üîå –ó–∞–ø—É—Å–∫ WOL handler");
                        crate::handle_wol(&bot, &q, &cfg).await
                    },
                    "shutdown_confirm" => {
                        println!("üî¥ –ó–∞–ø—É—Å–∫ shutdown confirm handler");
                        crate::ask_shutdown_confirm(&bot, &q).await
                    },
                    "shutdown_yes" => {
                        println!("üíÄ –ó–∞–ø—É—Å–∫ shutdown handler");
                        crate::handle_shutdown(&bot, &q, &cfg).await
                    },
                    "status" => {
                        println!("üü¢ –ó–∞–ø—É—Å–∫ status handler");
                        crate::handle_status(&bot, &q, &cfg).await
                    },
                    "cancel" => {
                        println!("‚ùå –ó–∞–ø—É—Å–∫ cancel handler");
                        crate::cancel(&bot, &q).await
                    },
                    _ => {
                        println!("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data: '{}'", data);
                        log::warn!("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data: '{}'", data);
                        Ok(())
                    },
                };
                
                match result {
                    Ok(_) => {
                        println!("‚úÖ Callback handler '{}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", data);
                        log::info!("Callback handler '{}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", data);
                    },
                    Err(e) => {
                        println!("‚ùå –û—à–∏–±–∫–∞ –≤ callback handler '{}': {}", data, e);
                        log::error!("Callback handler error for {}: {}", data, e);
                    }
                }
            } else {
                println!("‚ö†Ô∏è Callback query –±–µ–∑ data");
                log::warn!("–ü–æ–ª—É—á–µ–Ω callback query –±–µ–∑ data");
            }
        }
        _ => {
            println!("üîç –ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {:?}", upd.kind);
            log::debug!("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞: {:?}", upd.kind);
        }
    }
    
    Ok(())
} 